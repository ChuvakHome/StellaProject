// File generated by the BNF Converter (bnfc 2.9.6).

package ru.itmo.stella.lang;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(ru.itmo.stella.lang.Absyn.AProgram p, A arg) {
      R r = leaf(arg);
      r = combine(p.languagedecl_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.Extension x : p.listextension_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (ru.itmo.stella.lang.Absyn.Decl x : p.listdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* LanguageDecl */
    public R visit(ru.itmo.stella.lang.Absyn.LanguageCore p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Extension */
    public R visit(ru.itmo.stella.lang.Absyn.AnExtension p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Decl */
    public R visit(ru.itmo.stella.lang.Absyn.DeclFun p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Annotation x : p.listannotation_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (ru.itmo.stella.lang.Absyn.ParamDecl x : p.listparamdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.returntype_.accept(this, arg), r, arg);
      r = combine(p.throwtype_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.Decl x : p.listdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DeclFunGeneric p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Annotation x : p.listannotation_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (ru.itmo.stella.lang.Absyn.ParamDecl x : p.listparamdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.returntype_.accept(this, arg), r, arg);
      r = combine(p.throwtype_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.Decl x : p.listdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DeclTypeAlias p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DeclExceptionType p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DeclExceptionVariant p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* LocalDecl */
    public R visit(ru.itmo.stella.lang.Absyn.ALocalDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.decl_.accept(this, arg), r, arg);
      return r;
    }

/* Annotation */
    public R visit(ru.itmo.stella.lang.Absyn.InlineAnnotation p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* ParamDecl */
    public R visit(ru.itmo.stella.lang.Absyn.AParamDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* ReturnType */
    public R visit(ru.itmo.stella.lang.Absyn.NoReturnType p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.SomeReturnType p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* ThrowType */
    public R visit(ru.itmo.stella.lang.Absyn.NoThrowType p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.SomeThrowType p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Type x : p.listtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Type */
    public R visit(ru.itmo.stella.lang.Absyn.TypeAuto p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeFun p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Type x : p.listtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeForAll p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeRec p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeSum p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_1.accept(this, arg), r, arg);
      r = combine(p.type_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeTuple p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Type x : p.listtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeRecord p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.RecordFieldType x : p.listrecordfieldtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeVariant p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.VariantFieldType x : p.listvariantfieldtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeList p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeBool p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeNat p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeUnit p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeTop p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeBottom p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeRef p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeVar p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* MatchCase */
    public R visit(ru.itmo.stella.lang.Absyn.AMatchCase p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* OptionalTyping */
    public R visit(ru.itmo.stella.lang.Absyn.NoTyping p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.SomeTyping p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* PatternData */
    public R visit(ru.itmo.stella.lang.Absyn.NoPatternData p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.SomePatternData p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      return r;
    }

/* ExprData */
    public R visit(ru.itmo.stella.lang.Absyn.NoExprData p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.SomeExprData p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* Pattern */
    public R visit(ru.itmo.stella.lang.Absyn.PatternCastAs p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternAsc p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternVariant p, A arg) {
      R r = leaf(arg);
      r = combine(p.patterndata_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternInl p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternInr p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternTuple p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Pattern x : p.listpattern_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternRecord p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.LabelledPattern x : p.listlabelledpattern_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternList p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Pattern x : p.listpattern_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternCons p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_1.accept(this, arg), r, arg);
      r = combine(p.pattern_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternFalse p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternTrue p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternUnit p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternInt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternSucc p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.PatternVar p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* LabelledPattern */
    public R visit(ru.itmo.stella.lang.Absyn.ALabelledPattern p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      return r;
    }

/* Binding */
    public R visit(ru.itmo.stella.lang.Absyn.ABinding p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* Expr */
    public R visit(ru.itmo.stella.lang.Absyn.Sequence p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Let p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.PatternBinding x : p.listpatternbinding_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LetRec p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.PatternBinding x : p.listpatternbinding_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeAbstraction p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Assign p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.If p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      r = combine(p.expr_3.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LessThan p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LessThanOrEqual p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.GreaterThan p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.GreaterThanOrEqual p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Equal p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.NotEqual p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeAsc p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeCast p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Abstraction p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.ParamDecl x : p.listparamdecl_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Variant p, A arg) {
      R r = leaf(arg);
      r = combine(p.exprdata_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Match p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.MatchCase x : p.listmatchcase_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.List p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Add p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Subtract p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LogicOr p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Multiply p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Divide p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LogicAnd p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Ref p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Deref p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Application p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TypeApplication p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      for (ru.itmo.stella.lang.Absyn.Type x : p.listtype_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DotRecord p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.DotTuple p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Tuple p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Record p, A arg) {
      R r = leaf(arg);
      for (ru.itmo.stella.lang.Absyn.Binding x : p.listbinding_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConsList p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Head p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.IsEmpty p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Tail p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Panic p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Throw p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TryCatch p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TryWith p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.TryCastAs p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      r = combine(p.expr_3.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Inl p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Inr p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Succ p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.LogicNot p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Pred p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.IsZero p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Fix p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.NatRec p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      r = combine(p.expr_3.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Fold p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Unfold p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConstTrue p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConstFalse p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConstUnit p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConstInt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.ConstMemory p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ru.itmo.stella.lang.Absyn.Var p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* PatternBinding */
    public R visit(ru.itmo.stella.lang.Absyn.APatternBinding p, A arg) {
      R r = leaf(arg);
      r = combine(p.pattern_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* VariantFieldType */
    public R visit(ru.itmo.stella.lang.Absyn.AVariantFieldType p, A arg) {
      R r = leaf(arg);
      r = combine(p.optionaltyping_.accept(this, arg), r, arg);
      return r;
    }

/* RecordFieldType */
    public R visit(ru.itmo.stella.lang.Absyn.ARecordFieldType p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* Typing */
    public R visit(ru.itmo.stella.lang.Absyn.ATyping p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }


}
