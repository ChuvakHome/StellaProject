// File generated by the BNF Converter (bnfc 2.9.6).

package ru.itmo.stella.lang;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(ru.itmo.stella.lang.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListStellaIdent foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListStellaIdent foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.LanguageDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.LanguageDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Extension foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Extension foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListExtensionName foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListExtensionName foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListExtension foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListExtension foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Decl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Decl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.LocalDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.LocalDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListLocalDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListLocalDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Annotation foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Annotation foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListAnnotation foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListAnnotation foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ParamDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ParamDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListParamDecl foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListParamDecl foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ReturnType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ReturnType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ThrowType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ThrowType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Type foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Type foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.MatchCase foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.MatchCase foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListMatchCase foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListMatchCase foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.OptionalTyping foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.OptionalTyping foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.PatternData foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.PatternData foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ExprData foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ExprData foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Pattern foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Pattern foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListPattern foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListPattern foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.LabelledPattern foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.LabelledPattern foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListLabelledPattern foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListLabelledPattern foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Binding foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Binding foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListBinding foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListBinding foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Expr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Expr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.PatternBinding foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.PatternBinding foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListPatternBinding foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListPatternBinding foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.VariantFieldType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.VariantFieldType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListVariantFieldType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListVariantFieldType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.RecordFieldType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.RecordFieldType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.ListRecordFieldType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.ListRecordFieldType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(ru.itmo.stella.lang.Absyn.Typing foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(ru.itmo.stella.lang.Absyn.Typing foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(ru.itmo.stella.lang.Absyn.Program foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AProgram)
    {
       ru.itmo.stella.lang.Absyn.AProgram _aprogram = (ru.itmo.stella.lang.Absyn.AProgram) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_aprogram.languagedecl_, 0);
       pp(_aprogram.listextension_, 0);
       pp(_aprogram.listdecl_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListStellaIdent foo, int _i_)
  {
    ppListStellaIdent(foo.iterator(), _i_);
  }

  private static void ppListStellaIdent(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListStellaIdent(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.LanguageDecl foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.LanguageCore)
    {
       ru.itmo.stella.lang.Absyn.LanguageCore _languagecore = (ru.itmo.stella.lang.Absyn.LanguageCore) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("language");
       render("core");
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.Extension foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AnExtension)
    {
       ru.itmo.stella.lang.Absyn.AnExtension _anextension = (ru.itmo.stella.lang.Absyn.AnExtension) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("extend");
       render("with");
       pp(_anextension.listextensionname_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListExtensionName foo, int _i_)
  {
    ppListExtensionName(foo.iterator(), _i_);
  }

  private static void ppListExtensionName(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListExtensionName(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.ListExtension foo, int _i_)
  {
    ppListExtension(foo.iterator(), _i_);
  }

  private static void ppListExtension(java.util.Iterator<ru.itmo.stella.lang.Absyn.Extension> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      ru.itmo.stella.lang.Absyn.Extension el = it.next();
      pp(el, _i_); render(";"); ppListExtension(it, _i_);
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.Decl foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclFun)
    {
       ru.itmo.stella.lang.Absyn.DeclFun _declfun = (ru.itmo.stella.lang.Absyn.DeclFun) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_declfun.listannotation_, 0);
       render("fn");
       pp(_declfun.stellaident_, 0);
       render("(");
       pp(_declfun.listparamdecl_, 0);
       render(")");
       pp(_declfun.returntype_, 0);
       pp(_declfun.throwtype_, 0);
       render("{");
       pp(_declfun.listdecl_, 0);
       render("return");
       pp(_declfun.expr_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DeclFunGeneric)
    {
       ru.itmo.stella.lang.Absyn.DeclFunGeneric _declfungeneric = (ru.itmo.stella.lang.Absyn.DeclFunGeneric) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_declfungeneric.listannotation_, 0);
       render("generic");
       render("fn");
       pp(_declfungeneric.stellaident_, 0);
       render("[");
       pp(_declfungeneric.liststellaident_, 0);
       render("]");
       render("(");
       pp(_declfungeneric.listparamdecl_, 0);
       render(")");
       pp(_declfungeneric.returntype_, 0);
       pp(_declfungeneric.throwtype_, 0);
       render("{");
       pp(_declfungeneric.listdecl_, 0);
       render("return");
       pp(_declfungeneric.expr_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DeclTypeAlias)
    {
       ru.itmo.stella.lang.Absyn.DeclTypeAlias _decltypealias = (ru.itmo.stella.lang.Absyn.DeclTypeAlias) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("type");
       pp(_decltypealias.stellaident_, 0);
       render("=");
       pp(_decltypealias.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DeclExceptionType)
    {
       ru.itmo.stella.lang.Absyn.DeclExceptionType _declexceptiontype = (ru.itmo.stella.lang.Absyn.DeclExceptionType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("exception");
       render("type");
       render("=");
       pp(_declexceptiontype.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DeclExceptionVariant)
    {
       ru.itmo.stella.lang.Absyn.DeclExceptionVariant _declexceptionvariant = (ru.itmo.stella.lang.Absyn.DeclExceptionVariant) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("exception");
       render("variant");
       pp(_declexceptionvariant.stellaident_, 0);
       render(":");
       pp(_declexceptionvariant.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListDecl foo, int _i_)
  {
    ppListDecl(foo.iterator(), _i_);
  }

  private static void ppListDecl(java.util.Iterator<ru.itmo.stella.lang.Absyn.Decl> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      ru.itmo.stella.lang.Absyn.Decl el = it.next();
      pp(el, _i_); ppListDecl(it, _i_);
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.LocalDecl foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ALocalDecl)
    {
       ru.itmo.stella.lang.Absyn.ALocalDecl _alocaldecl = (ru.itmo.stella.lang.Absyn.ALocalDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_alocaldecl.decl_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListLocalDecl foo, int _i_)
  {
    ppListLocalDecl(foo.iterator(), _i_);
  }

  private static void ppListLocalDecl(java.util.Iterator<ru.itmo.stella.lang.Absyn.LocalDecl> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      ru.itmo.stella.lang.Absyn.LocalDecl el = it.next();
      pp(el, _i_); render(";"); ppListLocalDecl(it, _i_);
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.Annotation foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.InlineAnnotation)
    {
       ru.itmo.stella.lang.Absyn.InlineAnnotation _inlineannotation = (ru.itmo.stella.lang.Absyn.InlineAnnotation) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("inline");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListAnnotation foo, int _i_)
  {
    ppListAnnotation(foo.iterator(), _i_);
  }

  private static void ppListAnnotation(java.util.Iterator<ru.itmo.stella.lang.Absyn.Annotation> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      ru.itmo.stella.lang.Absyn.Annotation el = it.next();
      pp(el, _i_); ppListAnnotation(it, _i_);
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.ParamDecl foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AParamDecl)
    {
       ru.itmo.stella.lang.Absyn.AParamDecl _aparamdecl = (ru.itmo.stella.lang.Absyn.AParamDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_aparamdecl.stellaident_, 0);
       render(":");
       pp(_aparamdecl.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListParamDecl foo, int _i_)
  {
    ppListParamDecl(foo.iterator(), _i_);
  }

  private static void ppListParamDecl(java.util.Iterator<ru.itmo.stella.lang.Absyn.ParamDecl> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.ParamDecl el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListParamDecl(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.ReturnType foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoReturnType)
    {
       ru.itmo.stella.lang.Absyn.NoReturnType _noreturntype = (ru.itmo.stella.lang.Absyn.NoReturnType) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.SomeReturnType)
    {
       ru.itmo.stella.lang.Absyn.SomeReturnType _somereturntype = (ru.itmo.stella.lang.Absyn.SomeReturnType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("->");
       pp(_somereturntype.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ThrowType foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoThrowType)
    {
       ru.itmo.stella.lang.Absyn.NoThrowType _nothrowtype = (ru.itmo.stella.lang.Absyn.NoThrowType) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.SomeThrowType)
    {
       ru.itmo.stella.lang.Absyn.SomeThrowType _somethrowtype = (ru.itmo.stella.lang.Absyn.SomeThrowType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("throws");
       pp(_somethrowtype.listtype_, 9);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.Type foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAuto)
    {
       ru.itmo.stella.lang.Absyn.TypeAuto _typeauto = (ru.itmo.stella.lang.Absyn.TypeAuto) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("auto");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeFun)
    {
       ru.itmo.stella.lang.Absyn.TypeFun _typefun = (ru.itmo.stella.lang.Absyn.TypeFun) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("fn");
       render("(");
       pp(_typefun.listtype_, 0);
       render(")");
       render("->");
       pp(_typefun.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeForAll)
    {
       ru.itmo.stella.lang.Absyn.TypeForAll _typeforall = (ru.itmo.stella.lang.Absyn.TypeForAll) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("forall");
       pp(_typeforall.liststellaident_, 0);
       render(".");
       pp(_typeforall.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRec)
    {
       ru.itmo.stella.lang.Absyn.TypeRec _typerec = (ru.itmo.stella.lang.Absyn.TypeRec) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("µ");
       pp(_typerec.stellaident_, 0);
       render(".");
       pp(_typerec.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeSum)
    {
       ru.itmo.stella.lang.Absyn.TypeSum _typesum = (ru.itmo.stella.lang.Absyn.TypeSum) foo;
       if (_i_ > 1) render(_L_PAREN);
       pp(_typesum.type_1, 2);
       render("+");
       pp(_typesum.type_2, 2);
       if (_i_ > 1) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeTuple)
    {
       ru.itmo.stella.lang.Absyn.TypeTuple _typetuple = (ru.itmo.stella.lang.Absyn.TypeTuple) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("{");
       pp(_typetuple.listtype_, 0);
       render("}");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRecord)
    {
       ru.itmo.stella.lang.Absyn.TypeRecord _typerecord = (ru.itmo.stella.lang.Absyn.TypeRecord) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("{");
       pp(_typerecord.listrecordfieldtype_, 0);
       render("}");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeVariant)
    {
       ru.itmo.stella.lang.Absyn.TypeVariant _typevariant = (ru.itmo.stella.lang.Absyn.TypeVariant) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("<|");
       pp(_typevariant.listvariantfieldtype_, 0);
       render("|>");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeList)
    {
       ru.itmo.stella.lang.Absyn.TypeList _typelist = (ru.itmo.stella.lang.Absyn.TypeList) foo;
       if (_i_ > 2) render(_L_PAREN);
       render("[");
       pp(_typelist.type_, 0);
       render("]");
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeBool)
    {
       ru.itmo.stella.lang.Absyn.TypeBool _typebool = (ru.itmo.stella.lang.Absyn.TypeBool) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("Bool");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeNat)
    {
       ru.itmo.stella.lang.Absyn.TypeNat _typenat = (ru.itmo.stella.lang.Absyn.TypeNat) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("Nat");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeUnit)
    {
       ru.itmo.stella.lang.Absyn.TypeUnit _typeunit = (ru.itmo.stella.lang.Absyn.TypeUnit) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("Unit");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeTop)
    {
       ru.itmo.stella.lang.Absyn.TypeTop _typetop = (ru.itmo.stella.lang.Absyn.TypeTop) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("Top");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeBottom)
    {
       ru.itmo.stella.lang.Absyn.TypeBottom _typebottom = (ru.itmo.stella.lang.Absyn.TypeBottom) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("Bot");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRef)
    {
       ru.itmo.stella.lang.Absyn.TypeRef _typeref = (ru.itmo.stella.lang.Absyn.TypeRef) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("&");
       pp(_typeref.type_, 2);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeVar)
    {
       ru.itmo.stella.lang.Absyn.TypeVar _typevar = (ru.itmo.stella.lang.Absyn.TypeVar) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_typevar.stellaident_, 0);
       if (_i_ > 3) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListType foo, int _i_)
  {
    ppListType(foo.iterator(), _i_);
  }

  private static void ppListType(java.util.Iterator<ru.itmo.stella.lang.Absyn.Type> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.Type el = it.next();
      if (!it.hasNext())
      { /* last */
        switch(_i_)
    {
      case 9: pp(el, _i_); break;
      case 0: pp(el, _i_); break;
    }
      }
      else
      { /* cons */
        switch(_i_)
    {
      case 9: pp(el, _i_); render(","); ppListType(it, _i_); break;
      case 0: pp(el, _i_); render(","); ppListType(it, _i_); break;
    }
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.MatchCase foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AMatchCase)
    {
       ru.itmo.stella.lang.Absyn.AMatchCase _amatchcase = (ru.itmo.stella.lang.Absyn.AMatchCase) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_amatchcase.pattern_, 0);
       render("=>");
       pp(_amatchcase.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListMatchCase foo, int _i_)
  {
    ppListMatchCase(foo.iterator(), _i_);
  }

  private static void ppListMatchCase(java.util.Iterator<ru.itmo.stella.lang.Absyn.MatchCase> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.MatchCase el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render("|"); ppListMatchCase(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.OptionalTyping foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoTyping)
    {
       ru.itmo.stella.lang.Absyn.NoTyping _notyping = (ru.itmo.stella.lang.Absyn.NoTyping) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.SomeTyping)
    {
       ru.itmo.stella.lang.Absyn.SomeTyping _sometyping = (ru.itmo.stella.lang.Absyn.SomeTyping) foo;
       if (_i_ > 0) render(_L_PAREN);
       render(":");
       pp(_sometyping.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.PatternData foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoPatternData)
    {
       ru.itmo.stella.lang.Absyn.NoPatternData _nopatterndata = (ru.itmo.stella.lang.Absyn.NoPatternData) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.SomePatternData)
    {
       ru.itmo.stella.lang.Absyn.SomePatternData _somepatterndata = (ru.itmo.stella.lang.Absyn.SomePatternData) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("=");
       pp(_somepatterndata.pattern_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ExprData foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoExprData)
    {
       ru.itmo.stella.lang.Absyn.NoExprData _noexprdata = (ru.itmo.stella.lang.Absyn.NoExprData) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.SomeExprData)
    {
       ru.itmo.stella.lang.Absyn.SomeExprData _someexprdata = (ru.itmo.stella.lang.Absyn.SomeExprData) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("=");
       pp(_someexprdata.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.Pattern foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternCastAs)
    {
       ru.itmo.stella.lang.Absyn.PatternCastAs _patterncastas = (ru.itmo.stella.lang.Absyn.PatternCastAs) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_patterncastas.pattern_, 0);
       render("cast");
       render("as");
       pp(_patterncastas.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternAsc)
    {
       ru.itmo.stella.lang.Absyn.PatternAsc _patternasc = (ru.itmo.stella.lang.Absyn.PatternAsc) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_patternasc.pattern_, 0);
       render("as");
       pp(_patternasc.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternVariant)
    {
       ru.itmo.stella.lang.Absyn.PatternVariant _patternvariant = (ru.itmo.stella.lang.Absyn.PatternVariant) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("<|");
       pp(_patternvariant.stellaident_, 0);
       pp(_patternvariant.patterndata_, 0);
       render("|>");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInl)
    {
       ru.itmo.stella.lang.Absyn.PatternInl _patterninl = (ru.itmo.stella.lang.Absyn.PatternInl) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("inl");
       render("(");
       pp(_patterninl.pattern_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInr)
    {
       ru.itmo.stella.lang.Absyn.PatternInr _patterninr = (ru.itmo.stella.lang.Absyn.PatternInr) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("inr");
       render("(");
       pp(_patterninr.pattern_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternTuple)
    {
       ru.itmo.stella.lang.Absyn.PatternTuple _patterntuple = (ru.itmo.stella.lang.Absyn.PatternTuple) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_patterntuple.listpattern_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternRecord)
    {
       ru.itmo.stella.lang.Absyn.PatternRecord _patternrecord = (ru.itmo.stella.lang.Absyn.PatternRecord) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_patternrecord.listlabelledpattern_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternList)
    {
       ru.itmo.stella.lang.Absyn.PatternList _patternlist = (ru.itmo.stella.lang.Absyn.PatternList) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("[");
       pp(_patternlist.listpattern_, 0);
       render("]");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternCons)
    {
       ru.itmo.stella.lang.Absyn.PatternCons _patterncons = (ru.itmo.stella.lang.Absyn.PatternCons) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("cons");
       render("(");
       pp(_patterncons.pattern_1, 0);
       render(",");
       pp(_patterncons.pattern_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternFalse)
    {
       ru.itmo.stella.lang.Absyn.PatternFalse _patternfalse = (ru.itmo.stella.lang.Absyn.PatternFalse) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("false");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternTrue)
    {
       ru.itmo.stella.lang.Absyn.PatternTrue _patterntrue = (ru.itmo.stella.lang.Absyn.PatternTrue) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("true");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternUnit)
    {
       ru.itmo.stella.lang.Absyn.PatternUnit _patternunit = (ru.itmo.stella.lang.Absyn.PatternUnit) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("unit");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInt)
    {
       ru.itmo.stella.lang.Absyn.PatternInt _patternint = (ru.itmo.stella.lang.Absyn.PatternInt) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_patternint.integer_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternSucc)
    {
       ru.itmo.stella.lang.Absyn.PatternSucc _patternsucc = (ru.itmo.stella.lang.Absyn.PatternSucc) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("succ");
       render("(");
       pp(_patternsucc.pattern_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.PatternVar)
    {
       ru.itmo.stella.lang.Absyn.PatternVar _patternvar = (ru.itmo.stella.lang.Absyn.PatternVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_patternvar.stellaident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListPattern foo, int _i_)
  {
    ppListPattern(foo.iterator(), _i_);
  }

  private static void ppListPattern(java.util.Iterator<ru.itmo.stella.lang.Absyn.Pattern> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.Pattern el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListPattern(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.LabelledPattern foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ALabelledPattern)
    {
       ru.itmo.stella.lang.Absyn.ALabelledPattern _alabelledpattern = (ru.itmo.stella.lang.Absyn.ALabelledPattern) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_alabelledpattern.stellaident_, 0);
       render("=");
       pp(_alabelledpattern.pattern_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListLabelledPattern foo, int _i_)
  {
    ppListLabelledPattern(foo.iterator(), _i_);
  }

  private static void ppListLabelledPattern(java.util.Iterator<ru.itmo.stella.lang.Absyn.LabelledPattern> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.LabelledPattern el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListLabelledPattern(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.Binding foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ABinding)
    {
       ru.itmo.stella.lang.Absyn.ABinding _abinding = (ru.itmo.stella.lang.Absyn.ABinding) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_abinding.stellaident_, 0);
       render("=");
       pp(_abinding.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListBinding foo, int _i_)
  {
    ppListBinding(foo.iterator(), _i_);
  }

  private static void ppListBinding(java.util.Iterator<ru.itmo.stella.lang.Absyn.Binding> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.Binding el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListBinding(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.Expr foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.Sequence)
    {
       ru.itmo.stella.lang.Absyn.Sequence _sequence = (ru.itmo.stella.lang.Absyn.Sequence) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sequence.expr_1, 1);
       render(";");
       pp(_sequence.expr_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Let)
    {
       ru.itmo.stella.lang.Absyn.Let _let = (ru.itmo.stella.lang.Absyn.Let) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("let");
       pp(_let.listpatternbinding_, 0);
       render("in");
       pp(_let.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LetRec)
    {
       ru.itmo.stella.lang.Absyn.LetRec _letrec = (ru.itmo.stella.lang.Absyn.LetRec) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("letrec");
       pp(_letrec.listpatternbinding_, 0);
       render("in");
       pp(_letrec.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAbstraction)
    {
       ru.itmo.stella.lang.Absyn.TypeAbstraction _typeabstraction = (ru.itmo.stella.lang.Absyn.TypeAbstraction) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("generic");
       render("[");
       pp(_typeabstraction.liststellaident_, 0);
       render("]");
       pp(_typeabstraction.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Assign)
    {
       ru.itmo.stella.lang.Absyn.Assign _assign = (ru.itmo.stella.lang.Absyn.Assign) foo;
       if (_i_ > 1) render(_L_PAREN);
       pp(_assign.expr_1, 2);
       render(":=");
       pp(_assign.expr_2, 1);
       if (_i_ > 1) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.If)
    {
       ru.itmo.stella.lang.Absyn.If _if = (ru.itmo.stella.lang.Absyn.If) foo;
       if (_i_ > 1) render(_L_PAREN);
       render("if");
       pp(_if.expr_1, 1);
       render("then");
       pp(_if.expr_2, 1);
       render("else");
       pp(_if.expr_3, 1);
       if (_i_ > 1) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LessThan)
    {
       ru.itmo.stella.lang.Absyn.LessThan _lessthan = (ru.itmo.stella.lang.Absyn.LessThan) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_lessthan.expr_1, 3);
       render("<");
       pp(_lessthan.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LessThanOrEqual)
    {
       ru.itmo.stella.lang.Absyn.LessThanOrEqual _lessthanorequal = (ru.itmo.stella.lang.Absyn.LessThanOrEqual) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_lessthanorequal.expr_1, 3);
       render("<=");
       pp(_lessthanorequal.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.GreaterThan)
    {
       ru.itmo.stella.lang.Absyn.GreaterThan _greaterthan = (ru.itmo.stella.lang.Absyn.GreaterThan) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_greaterthan.expr_1, 3);
       render(">");
       pp(_greaterthan.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.GreaterThanOrEqual)
    {
       ru.itmo.stella.lang.Absyn.GreaterThanOrEqual _greaterthanorequal = (ru.itmo.stella.lang.Absyn.GreaterThanOrEqual) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_greaterthanorequal.expr_1, 3);
       render(">=");
       pp(_greaterthanorequal.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Equal)
    {
       ru.itmo.stella.lang.Absyn.Equal _equal = (ru.itmo.stella.lang.Absyn.Equal) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_equal.expr_1, 3);
       render("==");
       pp(_equal.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.NotEqual)
    {
       ru.itmo.stella.lang.Absyn.NotEqual _notequal = (ru.itmo.stella.lang.Absyn.NotEqual) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_notequal.expr_1, 3);
       render("!=");
       pp(_notequal.expr_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAsc)
    {
       ru.itmo.stella.lang.Absyn.TypeAsc _typeasc = (ru.itmo.stella.lang.Absyn.TypeAsc) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_typeasc.expr_, 3);
       render("as");
       pp(_typeasc.type_, 2);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeCast)
    {
       ru.itmo.stella.lang.Absyn.TypeCast _typecast = (ru.itmo.stella.lang.Absyn.TypeCast) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_typecast.expr_, 3);
       render("cast");
       render("as");
       pp(_typecast.type_, 2);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Abstraction)
    {
       ru.itmo.stella.lang.Absyn.Abstraction _abstraction = (ru.itmo.stella.lang.Absyn.Abstraction) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("fn");
       render("(");
       pp(_abstraction.listparamdecl_, 0);
       render(")");
       render("{");
       render("return");
       pp(_abstraction.expr_, 0);
       render("}");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Variant)
    {
       ru.itmo.stella.lang.Absyn.Variant _variant = (ru.itmo.stella.lang.Absyn.Variant) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("<|");
       pp(_variant.stellaident_, 0);
       pp(_variant.exprdata_, 0);
       render("|>");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Match)
    {
       ru.itmo.stella.lang.Absyn.Match _match = (ru.itmo.stella.lang.Absyn.Match) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("match");
       pp(_match.expr_, 2);
       render("{");
       pp(_match.listmatchcase_, 0);
       render("}");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.List)
    {
       ru.itmo.stella.lang.Absyn.List _list = (ru.itmo.stella.lang.Absyn.List) foo;
       if (_i_ > 3) render(_L_PAREN);
       render("[");
       pp(_list.listexpr_, 0);
       render("]");
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Add)
    {
       ru.itmo.stella.lang.Absyn.Add _add = (ru.itmo.stella.lang.Absyn.Add) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_add.expr_1, 3);
       render("+");
       pp(_add.expr_2, 4);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Subtract)
    {
       ru.itmo.stella.lang.Absyn.Subtract _subtract = (ru.itmo.stella.lang.Absyn.Subtract) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_subtract.expr_1, 3);
       render("-");
       pp(_subtract.expr_2, 4);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LogicOr)
    {
       ru.itmo.stella.lang.Absyn.LogicOr _logicor = (ru.itmo.stella.lang.Absyn.LogicOr) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_logicor.expr_1, 3);
       render("or");
       pp(_logicor.expr_2, 4);
       if (_i_ > 3) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Multiply)
    {
       ru.itmo.stella.lang.Absyn.Multiply _multiply = (ru.itmo.stella.lang.Absyn.Multiply) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_multiply.expr_1, 4);
       render("*");
       pp(_multiply.expr_2, 5);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Divide)
    {
       ru.itmo.stella.lang.Absyn.Divide _divide = (ru.itmo.stella.lang.Absyn.Divide) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_divide.expr_1, 4);
       render("/");
       pp(_divide.expr_2, 5);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LogicAnd)
    {
       ru.itmo.stella.lang.Absyn.LogicAnd _logicand = (ru.itmo.stella.lang.Absyn.LogicAnd) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_logicand.expr_1, 4);
       render("and");
       pp(_logicand.expr_2, 5);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Ref)
    {
       ru.itmo.stella.lang.Absyn.Ref _ref = (ru.itmo.stella.lang.Absyn.Ref) foo;
       if (_i_ > 5) render(_L_PAREN);
       render("new");
       render("(");
       pp(_ref.expr_, 0);
       render(")");
       if (_i_ > 5) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Deref)
    {
       ru.itmo.stella.lang.Absyn.Deref _deref = (ru.itmo.stella.lang.Absyn.Deref) foo;
       if (_i_ > 5) render(_L_PAREN);
       render("*");
       pp(_deref.expr_, 5);
       if (_i_ > 5) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Application)
    {
       ru.itmo.stella.lang.Absyn.Application _application = (ru.itmo.stella.lang.Absyn.Application) foo;
       if (_i_ > 6) render(_L_PAREN);
       pp(_application.expr_, 6);
       render("(");
       pp(_application.listexpr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TypeApplication)
    {
       ru.itmo.stella.lang.Absyn.TypeApplication _typeapplication = (ru.itmo.stella.lang.Absyn.TypeApplication) foo;
       if (_i_ > 6) render(_L_PAREN);
       pp(_typeapplication.expr_, 6);
       render("[");
       pp(_typeapplication.listtype_, 0);
       render("]");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DotRecord)
    {
       ru.itmo.stella.lang.Absyn.DotRecord _dotrecord = (ru.itmo.stella.lang.Absyn.DotRecord) foo;
       if (_i_ > 6) render(_L_PAREN);
       pp(_dotrecord.expr_, 6);
       render(".");
       pp(_dotrecord.stellaident_, 0);
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.DotTuple)
    {
       ru.itmo.stella.lang.Absyn.DotTuple _dottuple = (ru.itmo.stella.lang.Absyn.DotTuple) foo;
       if (_i_ > 6) render(_L_PAREN);
       pp(_dottuple.expr_, 6);
       render(".");
       pp(_dottuple.integer_, 0);
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Tuple)
    {
       ru.itmo.stella.lang.Absyn.Tuple _tuple = (ru.itmo.stella.lang.Absyn.Tuple) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("{");
       pp(_tuple.listexpr_, 0);
       render("}");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Record)
    {
       ru.itmo.stella.lang.Absyn.Record _record = (ru.itmo.stella.lang.Absyn.Record) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("{");
       pp(_record.listbinding_, 0);
       render("}");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConsList)
    {
       ru.itmo.stella.lang.Absyn.ConsList _conslist = (ru.itmo.stella.lang.Absyn.ConsList) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("cons");
       render("(");
       pp(_conslist.expr_1, 0);
       render(",");
       pp(_conslist.expr_2, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Head)
    {
       ru.itmo.stella.lang.Absyn.Head _head = (ru.itmo.stella.lang.Absyn.Head) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("List::head");
       render("(");
       pp(_head.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.IsEmpty)
    {
       ru.itmo.stella.lang.Absyn.IsEmpty _isempty = (ru.itmo.stella.lang.Absyn.IsEmpty) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("List::isempty");
       render("(");
       pp(_isempty.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Tail)
    {
       ru.itmo.stella.lang.Absyn.Tail _tail = (ru.itmo.stella.lang.Absyn.Tail) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("List::tail");
       render("(");
       pp(_tail.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Panic)
    {
       ru.itmo.stella.lang.Absyn.Panic _panic = (ru.itmo.stella.lang.Absyn.Panic) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("panic!");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Throw)
    {
       ru.itmo.stella.lang.Absyn.Throw _throw = (ru.itmo.stella.lang.Absyn.Throw) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("throw");
       render("(");
       pp(_throw.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TryCatch)
    {
       ru.itmo.stella.lang.Absyn.TryCatch _trycatch = (ru.itmo.stella.lang.Absyn.TryCatch) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("try");
       render("{");
       pp(_trycatch.expr_1, 0);
       render("}");
       render("catch");
       render("{");
       pp(_trycatch.pattern_, 0);
       render("=>");
       pp(_trycatch.expr_2, 0);
       render("}");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TryWith)
    {
       ru.itmo.stella.lang.Absyn.TryWith _trywith = (ru.itmo.stella.lang.Absyn.TryWith) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("try");
       render("{");
       pp(_trywith.expr_1, 0);
       render("}");
       render("with");
       render("{");
       pp(_trywith.expr_2, 0);
       render("}");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.TryCastAs)
    {
       ru.itmo.stella.lang.Absyn.TryCastAs _trycastas = (ru.itmo.stella.lang.Absyn.TryCastAs) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("try");
       render("{");
       pp(_trycastas.expr_1, 0);
       render("}");
       render("cast");
       render("as");
       pp(_trycastas.type_, 0);
       render("{");
       pp(_trycastas.pattern_, 0);
       render("=>");
       pp(_trycastas.expr_2, 0);
       render("}");
       render("with");
       render("{");
       pp(_trycastas.expr_3, 0);
       render("}");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Inl)
    {
       ru.itmo.stella.lang.Absyn.Inl _inl = (ru.itmo.stella.lang.Absyn.Inl) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("inl");
       render("(");
       pp(_inl.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Inr)
    {
       ru.itmo.stella.lang.Absyn.Inr _inr = (ru.itmo.stella.lang.Absyn.Inr) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("inr");
       render("(");
       pp(_inr.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Succ)
    {
       ru.itmo.stella.lang.Absyn.Succ _succ = (ru.itmo.stella.lang.Absyn.Succ) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("succ");
       render("(");
       pp(_succ.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.LogicNot)
    {
       ru.itmo.stella.lang.Absyn.LogicNot _logicnot = (ru.itmo.stella.lang.Absyn.LogicNot) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("not");
       render("(");
       pp(_logicnot.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Pred)
    {
       ru.itmo.stella.lang.Absyn.Pred _pred = (ru.itmo.stella.lang.Absyn.Pred) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("Nat::pred");
       render("(");
       pp(_pred.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.IsZero)
    {
       ru.itmo.stella.lang.Absyn.IsZero _iszero = (ru.itmo.stella.lang.Absyn.IsZero) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("Nat::iszero");
       render("(");
       pp(_iszero.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Fix)
    {
       ru.itmo.stella.lang.Absyn.Fix _fix = (ru.itmo.stella.lang.Absyn.Fix) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("fix");
       render("(");
       pp(_fix.expr_, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.NatRec)
    {
       ru.itmo.stella.lang.Absyn.NatRec _natrec = (ru.itmo.stella.lang.Absyn.NatRec) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("Nat::rec");
       render("(");
       pp(_natrec.expr_1, 0);
       render(",");
       pp(_natrec.expr_2, 0);
       render(",");
       pp(_natrec.expr_3, 0);
       render(")");
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Fold)
    {
       ru.itmo.stella.lang.Absyn.Fold _fold = (ru.itmo.stella.lang.Absyn.Fold) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("fold");
       render("[");
       pp(_fold.type_, 0);
       render("]");
       pp(_fold.expr_, 7);
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Unfold)
    {
       ru.itmo.stella.lang.Absyn.Unfold _unfold = (ru.itmo.stella.lang.Absyn.Unfold) foo;
       if (_i_ > 6) render(_L_PAREN);
       render("unfold");
       render("[");
       pp(_unfold.type_, 0);
       render("]");
       pp(_unfold.expr_, 7);
       if (_i_ > 6) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConstTrue)
    {
       ru.itmo.stella.lang.Absyn.ConstTrue _consttrue = (ru.itmo.stella.lang.Absyn.ConstTrue) foo;
       if (_i_ > 7) render(_L_PAREN);
       render("true");
       if (_i_ > 7) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConstFalse)
    {
       ru.itmo.stella.lang.Absyn.ConstFalse _constfalse = (ru.itmo.stella.lang.Absyn.ConstFalse) foo;
       if (_i_ > 7) render(_L_PAREN);
       render("false");
       if (_i_ > 7) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConstUnit)
    {
       ru.itmo.stella.lang.Absyn.ConstUnit _constunit = (ru.itmo.stella.lang.Absyn.ConstUnit) foo;
       if (_i_ > 7) render(_L_PAREN);
       render("unit");
       if (_i_ > 7) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConstInt)
    {
       ru.itmo.stella.lang.Absyn.ConstInt _constint = (ru.itmo.stella.lang.Absyn.ConstInt) foo;
       if (_i_ > 7) render(_L_PAREN);
       pp(_constint.integer_, 0);
       if (_i_ > 7) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.ConstMemory)
    {
       ru.itmo.stella.lang.Absyn.ConstMemory _constmemory = (ru.itmo.stella.lang.Absyn.ConstMemory) foo;
       if (_i_ > 7) render(_L_PAREN);
       pp(_constmemory.memoryaddress_, 0);
       if (_i_ > 7) render(_R_PAREN);
    }
    else     if (foo instanceof ru.itmo.stella.lang.Absyn.Var)
    {
       ru.itmo.stella.lang.Absyn.Var _var = (ru.itmo.stella.lang.Absyn.Var) foo;
       if (_i_ > 7) render(_L_PAREN);
       pp(_var.stellaident_, 0);
       if (_i_ > 7) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListExpr foo, int _i_)
  {
    ppListExpr(foo.iterator(), _i_);
  }

  private static void ppListExpr(java.util.Iterator<ru.itmo.stella.lang.Absyn.Expr> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.Expr el = it.next();
      if (!it.hasNext())
      { /* last */
        switch(_i_)
    {
      case 2: pp(el, _i_); render(";"); break;
      case 0: pp(el, _i_); break;
    }
      }
      else
      { /* cons */
        switch(_i_)
    {
      case 2: pp(el, _i_); render(";"); ppListExpr(it, _i_); break;
      case 0: pp(el, _i_); render(","); ppListExpr(it, _i_); break;
    }
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.PatternBinding foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.APatternBinding)
    {
       ru.itmo.stella.lang.Absyn.APatternBinding _apatternbinding = (ru.itmo.stella.lang.Absyn.APatternBinding) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_apatternbinding.pattern_, 0);
       render("=");
       pp(_apatternbinding.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListPatternBinding foo, int _i_)
  {
    ppListPatternBinding(foo.iterator(), _i_);
  }

  private static void ppListPatternBinding(java.util.Iterator<ru.itmo.stella.lang.Absyn.PatternBinding> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.PatternBinding el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListPatternBinding(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.VariantFieldType foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AVariantFieldType)
    {
       ru.itmo.stella.lang.Absyn.AVariantFieldType _avariantfieldtype = (ru.itmo.stella.lang.Absyn.AVariantFieldType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_avariantfieldtype.stellaident_, 0);
       pp(_avariantfieldtype.optionaltyping_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListVariantFieldType foo, int _i_)
  {
    ppListVariantFieldType(foo.iterator(), _i_);
  }

  private static void ppListVariantFieldType(java.util.Iterator<ru.itmo.stella.lang.Absyn.VariantFieldType> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.VariantFieldType el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListVariantFieldType(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.RecordFieldType foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ARecordFieldType)
    {
       ru.itmo.stella.lang.Absyn.ARecordFieldType _arecordfieldtype = (ru.itmo.stella.lang.Absyn.ARecordFieldType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_arecordfieldtype.stellaident_, 0);
       render(":");
       pp(_arecordfieldtype.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(ru.itmo.stella.lang.Absyn.ListRecordFieldType foo, int _i_)
  {
    ppListRecordFieldType(foo.iterator(), _i_);
  }

  private static void ppListRecordFieldType(java.util.Iterator<ru.itmo.stella.lang.Absyn.RecordFieldType> it, int _i_)
  {
    if (it.hasNext())
    {
      ru.itmo.stella.lang.Absyn.RecordFieldType el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListRecordFieldType(it, _i_);
      }
    }
  }


  private static void pp(ru.itmo.stella.lang.Absyn.Typing foo, int _i_)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ATyping)
    {
       ru.itmo.stella.lang.Absyn.ATyping _atyping = (ru.itmo.stella.lang.Absyn.ATyping) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_atyping.expr_, 0);
       render(":");
       pp(_atyping.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }


  private static void sh(ru.itmo.stella.lang.Absyn.Program foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AProgram)
    {
       ru.itmo.stella.lang.Absyn.AProgram _aprogram = (ru.itmo.stella.lang.Absyn.AProgram) foo;
       render("(");
       render("AProgram");
       sh(_aprogram.languagedecl_);
       render("[");
       sh(_aprogram.listextension_);
       render("]");
       render("[");
       sh(_aprogram.listdecl_);
       render("]");
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListStellaIdent foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.LanguageDecl foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.LanguageCore)
    {
       ru.itmo.stella.lang.Absyn.LanguageCore _languagecore = (ru.itmo.stella.lang.Absyn.LanguageCore) foo;
       render("LanguageCore");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Extension foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AnExtension)
    {
       ru.itmo.stella.lang.Absyn.AnExtension _anextension = (ru.itmo.stella.lang.Absyn.AnExtension) foo;
       render("(");
       render("AnExtension");
       render("[");
       sh(_anextension.listextensionname_);
       render("]");
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListExtensionName foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListExtension foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Extension> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Decl foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclFun)
    {
       ru.itmo.stella.lang.Absyn.DeclFun _declfun = (ru.itmo.stella.lang.Absyn.DeclFun) foo;
       render("(");
       render("DeclFun");
       render("[");
       sh(_declfun.listannotation_);
       render("]");
       sh(_declfun.stellaident_);
       render("[");
       sh(_declfun.listparamdecl_);
       render("]");
       sh(_declfun.returntype_);
       sh(_declfun.throwtype_);
       render("[");
       sh(_declfun.listdecl_);
       render("]");
       sh(_declfun.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclFunGeneric)
    {
       ru.itmo.stella.lang.Absyn.DeclFunGeneric _declfungeneric = (ru.itmo.stella.lang.Absyn.DeclFunGeneric) foo;
       render("(");
       render("DeclFunGeneric");
       render("[");
       sh(_declfungeneric.listannotation_);
       render("]");
       sh(_declfungeneric.stellaident_);
       render("[");
       sh(_declfungeneric.liststellaident_);
       render("]");
       render("[");
       sh(_declfungeneric.listparamdecl_);
       render("]");
       sh(_declfungeneric.returntype_);
       sh(_declfungeneric.throwtype_);
       render("[");
       sh(_declfungeneric.listdecl_);
       render("]");
       sh(_declfungeneric.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclTypeAlias)
    {
       ru.itmo.stella.lang.Absyn.DeclTypeAlias _decltypealias = (ru.itmo.stella.lang.Absyn.DeclTypeAlias) foo;
       render("(");
       render("DeclTypeAlias");
       sh(_decltypealias.stellaident_);
       sh(_decltypealias.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclExceptionType)
    {
       ru.itmo.stella.lang.Absyn.DeclExceptionType _declexceptiontype = (ru.itmo.stella.lang.Absyn.DeclExceptionType) foo;
       render("(");
       render("DeclExceptionType");
       sh(_declexceptiontype.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DeclExceptionVariant)
    {
       ru.itmo.stella.lang.Absyn.DeclExceptionVariant _declexceptionvariant = (ru.itmo.stella.lang.Absyn.DeclExceptionVariant) foo;
       render("(");
       render("DeclExceptionVariant");
       sh(_declexceptionvariant.stellaident_);
       sh(_declexceptionvariant.type_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListDecl foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Decl> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.LocalDecl foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ALocalDecl)
    {
       ru.itmo.stella.lang.Absyn.ALocalDecl _alocaldecl = (ru.itmo.stella.lang.Absyn.ALocalDecl) foo;
       render("(");
       render("ALocalDecl");
       sh(_alocaldecl.decl_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListLocalDecl foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.LocalDecl> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Annotation foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.InlineAnnotation)
    {
       ru.itmo.stella.lang.Absyn.InlineAnnotation _inlineannotation = (ru.itmo.stella.lang.Absyn.InlineAnnotation) foo;
       render("InlineAnnotation");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListAnnotation foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Annotation> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ParamDecl foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AParamDecl)
    {
       ru.itmo.stella.lang.Absyn.AParamDecl _aparamdecl = (ru.itmo.stella.lang.Absyn.AParamDecl) foo;
       render("(");
       render("AParamDecl");
       sh(_aparamdecl.stellaident_);
       sh(_aparamdecl.type_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListParamDecl foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.ParamDecl> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ReturnType foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoReturnType)
    {
       ru.itmo.stella.lang.Absyn.NoReturnType _noreturntype = (ru.itmo.stella.lang.Absyn.NoReturnType) foo;
       render("NoReturnType");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.SomeReturnType)
    {
       ru.itmo.stella.lang.Absyn.SomeReturnType _somereturntype = (ru.itmo.stella.lang.Absyn.SomeReturnType) foo;
       render("(");
       render("SomeReturnType");
       sh(_somereturntype.type_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ThrowType foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoThrowType)
    {
       ru.itmo.stella.lang.Absyn.NoThrowType _nothrowtype = (ru.itmo.stella.lang.Absyn.NoThrowType) foo;
       render("NoThrowType");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.SomeThrowType)
    {
       ru.itmo.stella.lang.Absyn.SomeThrowType _somethrowtype = (ru.itmo.stella.lang.Absyn.SomeThrowType) foo;
       render("(");
       render("SomeThrowType");
       render("[");
       sh(_somethrowtype.listtype_);
       render("]");
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Type foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAuto)
    {
       ru.itmo.stella.lang.Absyn.TypeAuto _typeauto = (ru.itmo.stella.lang.Absyn.TypeAuto) foo;
       render("TypeAuto");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeFun)
    {
       ru.itmo.stella.lang.Absyn.TypeFun _typefun = (ru.itmo.stella.lang.Absyn.TypeFun) foo;
       render("(");
       render("TypeFun");
       render("[");
       sh(_typefun.listtype_);
       render("]");
       sh(_typefun.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeForAll)
    {
       ru.itmo.stella.lang.Absyn.TypeForAll _typeforall = (ru.itmo.stella.lang.Absyn.TypeForAll) foo;
       render("(");
       render("TypeForAll");
       render("[");
       sh(_typeforall.liststellaident_);
       render("]");
       sh(_typeforall.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRec)
    {
       ru.itmo.stella.lang.Absyn.TypeRec _typerec = (ru.itmo.stella.lang.Absyn.TypeRec) foo;
       render("(");
       render("TypeRec");
       sh(_typerec.stellaident_);
       sh(_typerec.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeSum)
    {
       ru.itmo.stella.lang.Absyn.TypeSum _typesum = (ru.itmo.stella.lang.Absyn.TypeSum) foo;
       render("(");
       render("TypeSum");
       sh(_typesum.type_1);
       sh(_typesum.type_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeTuple)
    {
       ru.itmo.stella.lang.Absyn.TypeTuple _typetuple = (ru.itmo.stella.lang.Absyn.TypeTuple) foo;
       render("(");
       render("TypeTuple");
       render("[");
       sh(_typetuple.listtype_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRecord)
    {
       ru.itmo.stella.lang.Absyn.TypeRecord _typerecord = (ru.itmo.stella.lang.Absyn.TypeRecord) foo;
       render("(");
       render("TypeRecord");
       render("[");
       sh(_typerecord.listrecordfieldtype_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeVariant)
    {
       ru.itmo.stella.lang.Absyn.TypeVariant _typevariant = (ru.itmo.stella.lang.Absyn.TypeVariant) foo;
       render("(");
       render("TypeVariant");
       render("[");
       sh(_typevariant.listvariantfieldtype_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeList)
    {
       ru.itmo.stella.lang.Absyn.TypeList _typelist = (ru.itmo.stella.lang.Absyn.TypeList) foo;
       render("(");
       render("TypeList");
       sh(_typelist.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeBool)
    {
       ru.itmo.stella.lang.Absyn.TypeBool _typebool = (ru.itmo.stella.lang.Absyn.TypeBool) foo;
       render("TypeBool");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeNat)
    {
       ru.itmo.stella.lang.Absyn.TypeNat _typenat = (ru.itmo.stella.lang.Absyn.TypeNat) foo;
       render("TypeNat");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeUnit)
    {
       ru.itmo.stella.lang.Absyn.TypeUnit _typeunit = (ru.itmo.stella.lang.Absyn.TypeUnit) foo;
       render("TypeUnit");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeTop)
    {
       ru.itmo.stella.lang.Absyn.TypeTop _typetop = (ru.itmo.stella.lang.Absyn.TypeTop) foo;
       render("TypeTop");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeBottom)
    {
       ru.itmo.stella.lang.Absyn.TypeBottom _typebottom = (ru.itmo.stella.lang.Absyn.TypeBottom) foo;
       render("TypeBottom");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeRef)
    {
       ru.itmo.stella.lang.Absyn.TypeRef _typeref = (ru.itmo.stella.lang.Absyn.TypeRef) foo;
       render("(");
       render("TypeRef");
       sh(_typeref.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeVar)
    {
       ru.itmo.stella.lang.Absyn.TypeVar _typevar = (ru.itmo.stella.lang.Absyn.TypeVar) foo;
       render("(");
       render("TypeVar");
       sh(_typevar.stellaident_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListType foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Type> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.MatchCase foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AMatchCase)
    {
       ru.itmo.stella.lang.Absyn.AMatchCase _amatchcase = (ru.itmo.stella.lang.Absyn.AMatchCase) foo;
       render("(");
       render("AMatchCase");
       sh(_amatchcase.pattern_);
       sh(_amatchcase.expr_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListMatchCase foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.MatchCase> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.OptionalTyping foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoTyping)
    {
       ru.itmo.stella.lang.Absyn.NoTyping _notyping = (ru.itmo.stella.lang.Absyn.NoTyping) foo;
       render("NoTyping");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.SomeTyping)
    {
       ru.itmo.stella.lang.Absyn.SomeTyping _sometyping = (ru.itmo.stella.lang.Absyn.SomeTyping) foo;
       render("(");
       render("SomeTyping");
       sh(_sometyping.type_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.PatternData foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoPatternData)
    {
       ru.itmo.stella.lang.Absyn.NoPatternData _nopatterndata = (ru.itmo.stella.lang.Absyn.NoPatternData) foo;
       render("NoPatternData");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.SomePatternData)
    {
       ru.itmo.stella.lang.Absyn.SomePatternData _somepatterndata = (ru.itmo.stella.lang.Absyn.SomePatternData) foo;
       render("(");
       render("SomePatternData");
       sh(_somepatterndata.pattern_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ExprData foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.NoExprData)
    {
       ru.itmo.stella.lang.Absyn.NoExprData _noexprdata = (ru.itmo.stella.lang.Absyn.NoExprData) foo;
       render("NoExprData");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.SomeExprData)
    {
       ru.itmo.stella.lang.Absyn.SomeExprData _someexprdata = (ru.itmo.stella.lang.Absyn.SomeExprData) foo;
       render("(");
       render("SomeExprData");
       sh(_someexprdata.expr_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Pattern foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternCastAs)
    {
       ru.itmo.stella.lang.Absyn.PatternCastAs _patterncastas = (ru.itmo.stella.lang.Absyn.PatternCastAs) foo;
       render("(");
       render("PatternCastAs");
       sh(_patterncastas.pattern_);
       sh(_patterncastas.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternAsc)
    {
       ru.itmo.stella.lang.Absyn.PatternAsc _patternasc = (ru.itmo.stella.lang.Absyn.PatternAsc) foo;
       render("(");
       render("PatternAsc");
       sh(_patternasc.pattern_);
       sh(_patternasc.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternVariant)
    {
       ru.itmo.stella.lang.Absyn.PatternVariant _patternvariant = (ru.itmo.stella.lang.Absyn.PatternVariant) foo;
       render("(");
       render("PatternVariant");
       sh(_patternvariant.stellaident_);
       sh(_patternvariant.patterndata_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInl)
    {
       ru.itmo.stella.lang.Absyn.PatternInl _patterninl = (ru.itmo.stella.lang.Absyn.PatternInl) foo;
       render("(");
       render("PatternInl");
       sh(_patterninl.pattern_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInr)
    {
       ru.itmo.stella.lang.Absyn.PatternInr _patterninr = (ru.itmo.stella.lang.Absyn.PatternInr) foo;
       render("(");
       render("PatternInr");
       sh(_patterninr.pattern_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternTuple)
    {
       ru.itmo.stella.lang.Absyn.PatternTuple _patterntuple = (ru.itmo.stella.lang.Absyn.PatternTuple) foo;
       render("(");
       render("PatternTuple");
       render("[");
       sh(_patterntuple.listpattern_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternRecord)
    {
       ru.itmo.stella.lang.Absyn.PatternRecord _patternrecord = (ru.itmo.stella.lang.Absyn.PatternRecord) foo;
       render("(");
       render("PatternRecord");
       render("[");
       sh(_patternrecord.listlabelledpattern_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternList)
    {
       ru.itmo.stella.lang.Absyn.PatternList _patternlist = (ru.itmo.stella.lang.Absyn.PatternList) foo;
       render("(");
       render("PatternList");
       render("[");
       sh(_patternlist.listpattern_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternCons)
    {
       ru.itmo.stella.lang.Absyn.PatternCons _patterncons = (ru.itmo.stella.lang.Absyn.PatternCons) foo;
       render("(");
       render("PatternCons");
       sh(_patterncons.pattern_1);
       sh(_patterncons.pattern_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternFalse)
    {
       ru.itmo.stella.lang.Absyn.PatternFalse _patternfalse = (ru.itmo.stella.lang.Absyn.PatternFalse) foo;
       render("PatternFalse");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternTrue)
    {
       ru.itmo.stella.lang.Absyn.PatternTrue _patterntrue = (ru.itmo.stella.lang.Absyn.PatternTrue) foo;
       render("PatternTrue");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternUnit)
    {
       ru.itmo.stella.lang.Absyn.PatternUnit _patternunit = (ru.itmo.stella.lang.Absyn.PatternUnit) foo;
       render("PatternUnit");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternInt)
    {
       ru.itmo.stella.lang.Absyn.PatternInt _patternint = (ru.itmo.stella.lang.Absyn.PatternInt) foo;
       render("(");
       render("PatternInt");
       sh(_patternint.integer_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternSucc)
    {
       ru.itmo.stella.lang.Absyn.PatternSucc _patternsucc = (ru.itmo.stella.lang.Absyn.PatternSucc) foo;
       render("(");
       render("PatternSucc");
       sh(_patternsucc.pattern_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.PatternVar)
    {
       ru.itmo.stella.lang.Absyn.PatternVar _patternvar = (ru.itmo.stella.lang.Absyn.PatternVar) foo;
       render("(");
       render("PatternVar");
       sh(_patternvar.stellaident_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListPattern foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Pattern> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.LabelledPattern foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ALabelledPattern)
    {
       ru.itmo.stella.lang.Absyn.ALabelledPattern _alabelledpattern = (ru.itmo.stella.lang.Absyn.ALabelledPattern) foo;
       render("(");
       render("ALabelledPattern");
       sh(_alabelledpattern.stellaident_);
       sh(_alabelledpattern.pattern_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListLabelledPattern foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.LabelledPattern> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Binding foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ABinding)
    {
       ru.itmo.stella.lang.Absyn.ABinding _abinding = (ru.itmo.stella.lang.Absyn.ABinding) foo;
       render("(");
       render("ABinding");
       sh(_abinding.stellaident_);
       sh(_abinding.expr_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListBinding foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Binding> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Expr foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.Sequence)
    {
       ru.itmo.stella.lang.Absyn.Sequence _sequence = (ru.itmo.stella.lang.Absyn.Sequence) foo;
       render("(");
       render("Sequence");
       sh(_sequence.expr_1);
       sh(_sequence.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Let)
    {
       ru.itmo.stella.lang.Absyn.Let _let = (ru.itmo.stella.lang.Absyn.Let) foo;
       render("(");
       render("Let");
       render("[");
       sh(_let.listpatternbinding_);
       render("]");
       sh(_let.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LetRec)
    {
       ru.itmo.stella.lang.Absyn.LetRec _letrec = (ru.itmo.stella.lang.Absyn.LetRec) foo;
       render("(");
       render("LetRec");
       render("[");
       sh(_letrec.listpatternbinding_);
       render("]");
       sh(_letrec.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAbstraction)
    {
       ru.itmo.stella.lang.Absyn.TypeAbstraction _typeabstraction = (ru.itmo.stella.lang.Absyn.TypeAbstraction) foo;
       render("(");
       render("TypeAbstraction");
       render("[");
       sh(_typeabstraction.liststellaident_);
       render("]");
       sh(_typeabstraction.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Assign)
    {
       ru.itmo.stella.lang.Absyn.Assign _assign = (ru.itmo.stella.lang.Absyn.Assign) foo;
       render("(");
       render("Assign");
       sh(_assign.expr_1);
       sh(_assign.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.If)
    {
       ru.itmo.stella.lang.Absyn.If _if = (ru.itmo.stella.lang.Absyn.If) foo;
       render("(");
       render("If");
       sh(_if.expr_1);
       sh(_if.expr_2);
       sh(_if.expr_3);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LessThan)
    {
       ru.itmo.stella.lang.Absyn.LessThan _lessthan = (ru.itmo.stella.lang.Absyn.LessThan) foo;
       render("(");
       render("LessThan");
       sh(_lessthan.expr_1);
       sh(_lessthan.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LessThanOrEqual)
    {
       ru.itmo.stella.lang.Absyn.LessThanOrEqual _lessthanorequal = (ru.itmo.stella.lang.Absyn.LessThanOrEqual) foo;
       render("(");
       render("LessThanOrEqual");
       sh(_lessthanorequal.expr_1);
       sh(_lessthanorequal.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.GreaterThan)
    {
       ru.itmo.stella.lang.Absyn.GreaterThan _greaterthan = (ru.itmo.stella.lang.Absyn.GreaterThan) foo;
       render("(");
       render("GreaterThan");
       sh(_greaterthan.expr_1);
       sh(_greaterthan.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.GreaterThanOrEqual)
    {
       ru.itmo.stella.lang.Absyn.GreaterThanOrEqual _greaterthanorequal = (ru.itmo.stella.lang.Absyn.GreaterThanOrEqual) foo;
       render("(");
       render("GreaterThanOrEqual");
       sh(_greaterthanorequal.expr_1);
       sh(_greaterthanorequal.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Equal)
    {
       ru.itmo.stella.lang.Absyn.Equal _equal = (ru.itmo.stella.lang.Absyn.Equal) foo;
       render("(");
       render("Equal");
       sh(_equal.expr_1);
       sh(_equal.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.NotEqual)
    {
       ru.itmo.stella.lang.Absyn.NotEqual _notequal = (ru.itmo.stella.lang.Absyn.NotEqual) foo;
       render("(");
       render("NotEqual");
       sh(_notequal.expr_1);
       sh(_notequal.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeAsc)
    {
       ru.itmo.stella.lang.Absyn.TypeAsc _typeasc = (ru.itmo.stella.lang.Absyn.TypeAsc) foo;
       render("(");
       render("TypeAsc");
       sh(_typeasc.expr_);
       sh(_typeasc.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeCast)
    {
       ru.itmo.stella.lang.Absyn.TypeCast _typecast = (ru.itmo.stella.lang.Absyn.TypeCast) foo;
       render("(");
       render("TypeCast");
       sh(_typecast.expr_);
       sh(_typecast.type_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Abstraction)
    {
       ru.itmo.stella.lang.Absyn.Abstraction _abstraction = (ru.itmo.stella.lang.Absyn.Abstraction) foo;
       render("(");
       render("Abstraction");
       render("[");
       sh(_abstraction.listparamdecl_);
       render("]");
       sh(_abstraction.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Variant)
    {
       ru.itmo.stella.lang.Absyn.Variant _variant = (ru.itmo.stella.lang.Absyn.Variant) foo;
       render("(");
       render("Variant");
       sh(_variant.stellaident_);
       sh(_variant.exprdata_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Match)
    {
       ru.itmo.stella.lang.Absyn.Match _match = (ru.itmo.stella.lang.Absyn.Match) foo;
       render("(");
       render("Match");
       sh(_match.expr_);
       render("[");
       sh(_match.listmatchcase_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.List)
    {
       ru.itmo.stella.lang.Absyn.List _list = (ru.itmo.stella.lang.Absyn.List) foo;
       render("(");
       render("List");
       render("[");
       sh(_list.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Add)
    {
       ru.itmo.stella.lang.Absyn.Add _add = (ru.itmo.stella.lang.Absyn.Add) foo;
       render("(");
       render("Add");
       sh(_add.expr_1);
       sh(_add.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Subtract)
    {
       ru.itmo.stella.lang.Absyn.Subtract _subtract = (ru.itmo.stella.lang.Absyn.Subtract) foo;
       render("(");
       render("Subtract");
       sh(_subtract.expr_1);
       sh(_subtract.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LogicOr)
    {
       ru.itmo.stella.lang.Absyn.LogicOr _logicor = (ru.itmo.stella.lang.Absyn.LogicOr) foo;
       render("(");
       render("LogicOr");
       sh(_logicor.expr_1);
       sh(_logicor.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Multiply)
    {
       ru.itmo.stella.lang.Absyn.Multiply _multiply = (ru.itmo.stella.lang.Absyn.Multiply) foo;
       render("(");
       render("Multiply");
       sh(_multiply.expr_1);
       sh(_multiply.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Divide)
    {
       ru.itmo.stella.lang.Absyn.Divide _divide = (ru.itmo.stella.lang.Absyn.Divide) foo;
       render("(");
       render("Divide");
       sh(_divide.expr_1);
       sh(_divide.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LogicAnd)
    {
       ru.itmo.stella.lang.Absyn.LogicAnd _logicand = (ru.itmo.stella.lang.Absyn.LogicAnd) foo;
       render("(");
       render("LogicAnd");
       sh(_logicand.expr_1);
       sh(_logicand.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Ref)
    {
       ru.itmo.stella.lang.Absyn.Ref _ref = (ru.itmo.stella.lang.Absyn.Ref) foo;
       render("(");
       render("Ref");
       sh(_ref.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Deref)
    {
       ru.itmo.stella.lang.Absyn.Deref _deref = (ru.itmo.stella.lang.Absyn.Deref) foo;
       render("(");
       render("Deref");
       sh(_deref.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Application)
    {
       ru.itmo.stella.lang.Absyn.Application _application = (ru.itmo.stella.lang.Absyn.Application) foo;
       render("(");
       render("Application");
       sh(_application.expr_);
       render("[");
       sh(_application.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TypeApplication)
    {
       ru.itmo.stella.lang.Absyn.TypeApplication _typeapplication = (ru.itmo.stella.lang.Absyn.TypeApplication) foo;
       render("(");
       render("TypeApplication");
       sh(_typeapplication.expr_);
       render("[");
       sh(_typeapplication.listtype_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DotRecord)
    {
       ru.itmo.stella.lang.Absyn.DotRecord _dotrecord = (ru.itmo.stella.lang.Absyn.DotRecord) foo;
       render("(");
       render("DotRecord");
       sh(_dotrecord.expr_);
       sh(_dotrecord.stellaident_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.DotTuple)
    {
       ru.itmo.stella.lang.Absyn.DotTuple _dottuple = (ru.itmo.stella.lang.Absyn.DotTuple) foo;
       render("(");
       render("DotTuple");
       sh(_dottuple.expr_);
       sh(_dottuple.integer_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Tuple)
    {
       ru.itmo.stella.lang.Absyn.Tuple _tuple = (ru.itmo.stella.lang.Absyn.Tuple) foo;
       render("(");
       render("Tuple");
       render("[");
       sh(_tuple.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Record)
    {
       ru.itmo.stella.lang.Absyn.Record _record = (ru.itmo.stella.lang.Absyn.Record) foo;
       render("(");
       render("Record");
       render("[");
       sh(_record.listbinding_);
       render("]");
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConsList)
    {
       ru.itmo.stella.lang.Absyn.ConsList _conslist = (ru.itmo.stella.lang.Absyn.ConsList) foo;
       render("(");
       render("ConsList");
       sh(_conslist.expr_1);
       sh(_conslist.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Head)
    {
       ru.itmo.stella.lang.Absyn.Head _head = (ru.itmo.stella.lang.Absyn.Head) foo;
       render("(");
       render("Head");
       sh(_head.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.IsEmpty)
    {
       ru.itmo.stella.lang.Absyn.IsEmpty _isempty = (ru.itmo.stella.lang.Absyn.IsEmpty) foo;
       render("(");
       render("IsEmpty");
       sh(_isempty.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Tail)
    {
       ru.itmo.stella.lang.Absyn.Tail _tail = (ru.itmo.stella.lang.Absyn.Tail) foo;
       render("(");
       render("Tail");
       sh(_tail.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Panic)
    {
       ru.itmo.stella.lang.Absyn.Panic _panic = (ru.itmo.stella.lang.Absyn.Panic) foo;
       render("Panic");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Throw)
    {
       ru.itmo.stella.lang.Absyn.Throw _throw = (ru.itmo.stella.lang.Absyn.Throw) foo;
       render("(");
       render("Throw");
       sh(_throw.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TryCatch)
    {
       ru.itmo.stella.lang.Absyn.TryCatch _trycatch = (ru.itmo.stella.lang.Absyn.TryCatch) foo;
       render("(");
       render("TryCatch");
       sh(_trycatch.expr_1);
       sh(_trycatch.pattern_);
       sh(_trycatch.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TryWith)
    {
       ru.itmo.stella.lang.Absyn.TryWith _trywith = (ru.itmo.stella.lang.Absyn.TryWith) foo;
       render("(");
       render("TryWith");
       sh(_trywith.expr_1);
       sh(_trywith.expr_2);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.TryCastAs)
    {
       ru.itmo.stella.lang.Absyn.TryCastAs _trycastas = (ru.itmo.stella.lang.Absyn.TryCastAs) foo;
       render("(");
       render("TryCastAs");
       sh(_trycastas.expr_1);
       sh(_trycastas.type_);
       sh(_trycastas.pattern_);
       sh(_trycastas.expr_2);
       sh(_trycastas.expr_3);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Inl)
    {
       ru.itmo.stella.lang.Absyn.Inl _inl = (ru.itmo.stella.lang.Absyn.Inl) foo;
       render("(");
       render("Inl");
       sh(_inl.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Inr)
    {
       ru.itmo.stella.lang.Absyn.Inr _inr = (ru.itmo.stella.lang.Absyn.Inr) foo;
       render("(");
       render("Inr");
       sh(_inr.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Succ)
    {
       ru.itmo.stella.lang.Absyn.Succ _succ = (ru.itmo.stella.lang.Absyn.Succ) foo;
       render("(");
       render("Succ");
       sh(_succ.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.LogicNot)
    {
       ru.itmo.stella.lang.Absyn.LogicNot _logicnot = (ru.itmo.stella.lang.Absyn.LogicNot) foo;
       render("(");
       render("LogicNot");
       sh(_logicnot.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Pred)
    {
       ru.itmo.stella.lang.Absyn.Pred _pred = (ru.itmo.stella.lang.Absyn.Pred) foo;
       render("(");
       render("Pred");
       sh(_pred.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.IsZero)
    {
       ru.itmo.stella.lang.Absyn.IsZero _iszero = (ru.itmo.stella.lang.Absyn.IsZero) foo;
       render("(");
       render("IsZero");
       sh(_iszero.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Fix)
    {
       ru.itmo.stella.lang.Absyn.Fix _fix = (ru.itmo.stella.lang.Absyn.Fix) foo;
       render("(");
       render("Fix");
       sh(_fix.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.NatRec)
    {
       ru.itmo.stella.lang.Absyn.NatRec _natrec = (ru.itmo.stella.lang.Absyn.NatRec) foo;
       render("(");
       render("NatRec");
       sh(_natrec.expr_1);
       sh(_natrec.expr_2);
       sh(_natrec.expr_3);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Fold)
    {
       ru.itmo.stella.lang.Absyn.Fold _fold = (ru.itmo.stella.lang.Absyn.Fold) foo;
       render("(");
       render("Fold");
       sh(_fold.type_);
       sh(_fold.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Unfold)
    {
       ru.itmo.stella.lang.Absyn.Unfold _unfold = (ru.itmo.stella.lang.Absyn.Unfold) foo;
       render("(");
       render("Unfold");
       sh(_unfold.type_);
       sh(_unfold.expr_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConstTrue)
    {
       ru.itmo.stella.lang.Absyn.ConstTrue _consttrue = (ru.itmo.stella.lang.Absyn.ConstTrue) foo;
       render("ConstTrue");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConstFalse)
    {
       ru.itmo.stella.lang.Absyn.ConstFalse _constfalse = (ru.itmo.stella.lang.Absyn.ConstFalse) foo;
       render("ConstFalse");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConstUnit)
    {
       ru.itmo.stella.lang.Absyn.ConstUnit _constunit = (ru.itmo.stella.lang.Absyn.ConstUnit) foo;
       render("ConstUnit");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConstInt)
    {
       ru.itmo.stella.lang.Absyn.ConstInt _constint = (ru.itmo.stella.lang.Absyn.ConstInt) foo;
       render("(");
       render("ConstInt");
       sh(_constint.integer_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.ConstMemory)
    {
       ru.itmo.stella.lang.Absyn.ConstMemory _constmemory = (ru.itmo.stella.lang.Absyn.ConstMemory) foo;
       render("(");
       render("ConstMemory");
       sh(_constmemory.memoryaddress_);
       render(")");
    }
    if (foo instanceof ru.itmo.stella.lang.Absyn.Var)
    {
       ru.itmo.stella.lang.Absyn.Var _var = (ru.itmo.stella.lang.Absyn.Var) foo;
       render("(");
       render("Var");
       sh(_var.stellaident_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListExpr foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.Expr> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.PatternBinding foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.APatternBinding)
    {
       ru.itmo.stella.lang.Absyn.APatternBinding _apatternbinding = (ru.itmo.stella.lang.Absyn.APatternBinding) foo;
       render("(");
       render("APatternBinding");
       sh(_apatternbinding.pattern_);
       sh(_apatternbinding.expr_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListPatternBinding foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.PatternBinding> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.VariantFieldType foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.AVariantFieldType)
    {
       ru.itmo.stella.lang.Absyn.AVariantFieldType _avariantfieldtype = (ru.itmo.stella.lang.Absyn.AVariantFieldType) foo;
       render("(");
       render("AVariantFieldType");
       sh(_avariantfieldtype.stellaident_);
       sh(_avariantfieldtype.optionaltyping_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListVariantFieldType foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.VariantFieldType> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.RecordFieldType foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ARecordFieldType)
    {
       ru.itmo.stella.lang.Absyn.ARecordFieldType _arecordfieldtype = (ru.itmo.stella.lang.Absyn.ARecordFieldType) foo;
       render("(");
       render("ARecordFieldType");
       sh(_arecordfieldtype.stellaident_);
       sh(_arecordfieldtype.type_);
       render(")");
    }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.ListRecordFieldType foo)
  {
     for (java.util.Iterator<ru.itmo.stella.lang.Absyn.RecordFieldType> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(ru.itmo.stella.lang.Absyn.Typing foo)
  {
    if (foo instanceof ru.itmo.stella.lang.Absyn.ATyping)
    {
       ru.itmo.stella.lang.Absyn.ATyping _atyping = (ru.itmo.stella.lang.Absyn.ATyping) foo;
       render("(");
       render("ATyping");
       sh(_atyping.expr_);
       sh(_atyping.type_);
       render(")");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + escape(c.toString()) + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + escape(c.toString()) + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + escape(s) + "\""); }

  public static String escape(String s) {
    if (s == null) return null;
    return s.replace("\\", "\\\\")
            .replace("\t", "\\t")
            .replace("\b", "\\b")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\f", "\\f")
            .replace("\"", "\\\"");
  }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

