// File generated by the BNF Converter (bnfc 2.9.6).

package ru.itmo.stella.lang.Absyn;

public abstract class Expr implements java.io.Serializable {
  public abstract <R,A> R accept(Expr.Visitor<R,A> v, A arg);
  public interface Visitor <R,A> {
    public R visit(ru.itmo.stella.lang.Absyn.Sequence p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Assign p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.If p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Let p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LetRec p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TypeAbstraction p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LessThan p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LessThanOrEqual p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.GreaterThan p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.GreaterThanOrEqual p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Equal p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.NotEqual p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TypeAsc p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TypeCast p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Abstraction p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Variant p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Match p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.List p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Add p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Subtract p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LogicOr p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Multiply p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Divide p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LogicAnd p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Ref p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Deref p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Application p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TypeApplication p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.DotRecord p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.DotTuple p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Tuple p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Record p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConsList p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Head p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.IsEmpty p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Tail p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Panic p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Throw p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TryCatch p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TryWith p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.TryCastAs p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Inl p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Inr p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Succ p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.LogicNot p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Pred p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.IsZero p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Fix p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.NatRec p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Fold p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Unfold p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConstTrue p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConstFalse p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConstUnit p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConstInt p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.ConstMemory p, A arg);
    public R visit(ru.itmo.stella.lang.Absyn.Var p, A arg);

  }

}
